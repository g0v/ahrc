{"version":3,"sources":["Header.js","About.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","_templateObject","Button","button","_templateObject2","Header","onClick","lang","_this","props","_this2","this","react_default","a","createElement","React","Component","About_templateObject","About","state","undefined","data","axios","concat","setState","prevProps","reload","About_Wrapper","react_markdown_default","source","App","onLangClick","className","Header_Header","About_About","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ifAGA,IAAMA,EAAUC,IAAOC,IAAVC,KAIPC,EAASH,IAAOI,OAAVC,KAUSC,6MACnBC,QAAU,SAAAC,GAAI,OAAIC,EAAKC,MAAMH,QAAQC,4EAE5B,IAAAG,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAChB,EAAD,KACEc,EAAAC,EAAAC,cAACZ,EAAD,CAAQI,QAAS,kBAAMI,EAAKJ,QAAQ,QAApC,MACAM,EAAAC,EAAAC,cAACZ,EAAD,CAAQI,QAAS,kBAAMI,EAAKJ,QAAQ,QAApC,MACAM,EAAAC,EAAAC,cAACZ,EAAD,CAAQI,QAAS,kBAAMI,EAAKJ,QAAQ,QAApC,MACAM,EAAAC,EAAAC,cAACZ,EAAD,CAAQI,QAAS,kBAAMI,EAAKJ,QAAQ,QAApC,cAT4BS,IAAMC,yKCX1C,IAAMlB,EAAUC,IAAOC,IAAViB,KAIQC,6MACnBC,MAAQ,CACNZ,UAAMa,EACNC,KAAM,qMAIEd,EAASI,KAAKF,MAAdF,cACee,IAAK,YAAAC,OAAahB,EAAb,wBAApBc,SACRV,KAAKa,SAAS,CAAEH,qJAGAI,GAChBd,KAAKe,oDAGYD,GACAd,KAAKF,MAAdF,OACKkB,EAAUlB,MAAMI,KAAKe,0CAG3B,IACCL,EAASV,KAAKQ,MAAdE,KACR,OACET,EAAAC,EAAAC,cAACa,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CAAegB,OAAQR,YAzBIN,IAAMC,WCLpBc,6MACnBX,MAAQ,CACNZ,KAAM,QAGRwB,YAAc,SAAAxB,GAAI,OAAIC,EAAKgB,SAAS,CAAEjB,kFAE7B,IACCA,EAASI,KAAKQ,MAAdZ,KAER,OACEK,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAACmB,EAAD,CAAQ3B,QAASK,KAAKoB,cACtBnB,EAAAC,EAAAC,cAACoB,EAAD,CAAO3B,KAAMA,YAbYQ,IAAMC,WCOnBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f12ecfc4.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  text-align: left;\n`;\n\nconst Button = styled.button`\n  border: none;\n  padding: 15px;\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    color: #198964\n  }\n`;\n\nexport default class Header extends React.Component {\n  onClick = lang => this.props.onClick(lang);\n\n  render() {\n    return (\n      <Wrapper>\n        <Button onClick={() => this.onClick(\"EN\")}>EN</Button>\n        <Button onClick={() => this.onClick(\"CH\")}>CH</Button>\n        <Button onClick={() => this.onClick(\"KR\")}>KR</Button>\n        <Button onClick={() => this.onClick(\"JP\")}>JP</Button>\n      </Wrapper>\n    );\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport ReactMarkdown from 'react-markdown';\nimport styled from 'styled-components';\nimport './About.css';\n\nconst Wrapper = styled.div`\n  text-align: left;\n`;\n\nexport default class About extends React.Component {\n  state = {\n    lang: undefined,\n    data: \"\",\n  };\n\n  async reload() {\n    const { lang } = this.props;\n    const { data } = await axios(`./readme/${lang}.md`);\n    this.setState({ data });\n  }\n\n  componentDidMount(prevProps) {\n    this.reload();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { lang } = this.props;\n    if (lang !== prevProps.lang) this.reload();\n  }\n\n  render() {\n    const { data } = this.state;\n    return (\n      <Wrapper>\n        <ReactMarkdown source={data} />\n      </Wrapper>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport About from \"./About\";\n\nexport default class App extends React.Component {\n  state = {\n    lang: \"CH\",\n  };\n\n  onLangClick = lang => this.setState({ lang });\n\n  render() {\n    const { lang } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Header onClick={this.onLangClick} />\n        <About lang={lang} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}